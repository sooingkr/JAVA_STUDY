package Article;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.Enumeration;
import java.util.ResourceBundle;

import Board.MemberDAO;

public class ArticleDAO {
	MemberDAO mdao = MemberDAO.getInstance(); // Connection 객체 얻어오기 위함
	
	
	// 삽입이 제대로 이루어 질 경우 ArticleDTO를 반환해 삽입이 잘 이루어졌는지를 확인하는 용도로도 사용할 것이다.(null이면 추가 실패, null이 아니면 추가 성공)
	public ArticleDTO insert( ArticleDTO article ) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		String sql = "insert into article(writer_id, writer_name, title, regdate, moddate, read_cnt) values(?,?,?,?,?,0)";
		// article_no 는 auto_increment임으로 따로 삽입하지 않고 알아서 관리될 수 있도록 함.
		// read_cnt는 게시글 처음 삽입시 조회수는 0으로 세팅
		
		try {
			
			conn = mdao.dbConnect(); // db Connection 객체 얻어오기
			conn.setAutoCommit(false);
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, article.getWriter().getId());
			pstmt.setString(2, article.getWriter().getName());
			pstmt.setString(3, article.getTitle());
			pstmt.setTimestamp(4, new Timestamp(new Date().getTime()));
			pstmt.setTimestamp(5, new Timestamp(new Date().getTime()));
			// 게시글 처음 등록시 등록시간과 수정시간은 동일함
			// read_cnt는 고정값 0을 넣었음으로 따로 세팅이 불필요
			int updateNum = pstmt.executeUpdate(); // DB에 반영하고 추가된 개수를 리턴함
			
			conn.commit();
			// 추가된경우와 추가되지 않은 경우를 구분해 주어야 함.
			if ( updateNum > 0 ) { // 게시글 삽입이 성공한 경우.
				String query = "select last_insert_id() from article"; // last_insert_id() 메서드 : 마지막에 추가된 튜플의 Primary Key값을 가지고 옴.(article_no)
				pstmt = conn.prepareStatement(query);
				rs = pstmt.executeQuery();
				
				while( rs.next() ) {
					int newNum = rs.getInt(1); // ColumnIndex : 1
					// 새로 추가된 게시글 번호를 가지고 옴
					ArticleDTO articledto = new ArticleDTO(newNum, article.getTitle(), article.getRegDate(), article.getModDate(), 0, article.getWriter() );
					return articledto; // 추가한 정보를 담고 있는 ArticleDTO를 반환함 -> 이 객체를 이용해서 ArticleContentDAO 등에서 사용
				}
			} 
			
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
			}
		} finally {
			try {
				if ( rs != null ) rs.close();
				if ( pstmt != null ) pstmt.close();
			} catch (SQLException e) {
			}
		}
		
		// 추가가 실패한 경우
		return null;
	
	} // end of insert
	
	// 전체 게시글의 수를 반환
	public int selectCount() {
		
		
		return 0;
	}
}
